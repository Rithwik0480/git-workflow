/**
 * Schema.
 *
 * * A Schema is a description of the [[Stream]] data structure, based on [JSON Schema](http://json-schema.org/).
 * * Schemas are published and stored by the issuer.
 * * Permissioned users can use a Schema to create a new [[Stream]].
 *
 * @packageDocumentation
 * @module Schema
 * @preferred
 */
import { Identifier, Crypto, JsonSchema, SDKErrors, jsonabc, } from '@cord.network/utils';
import { SCHEMA_IDENT, SCHEMA_PREFIX } from '@cord.network/types';
import { SchemaModel, MetadataModel, SchemaModelV1 } from './Schema.types.js';
import { ConfigService } from '@cord.network/config';
import * as Did from '@cord.network/did';
import { blake2AsHex } from '@polkadot/util-crypto';
/**
 * Utility for (re)creating Schema hashes. Sorts the schema and strips the $id property (which contains the Schema hash) before stringifying.
 *
 * @param schema The Schema (with or without $id).
 * @returns A deterministic JSON serialization of a Schema, omitting the $id property.
 */
export function serializeForHash(schema) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { $id, ...schemaWithoutId } = schema;
    return Crypto.encodeObjectAsStr(schemaWithoutId);
}
/**
 * Calculates the Schema hash from schema properties.
 *
 * @param schema The Schema (with or without $id).
 * @returns Hash as hex string.
 */
export function getHashForSchema(schema) {
    const serializedSchema = serializeForHash(schema);
    return Crypto.hashStr(serializedSchema);
}
/**
 * Calculates the schema $id by hashing it.
 *
 * @param schema  Schema for which to create the id.
 * @returns Schema id uri.
 */
export function getUriForSchema(schema, creator) {
    const api = ConfigService.get('api');
    const serializedSchema = serializeForHash(schema);
    const scaleEncodedSchema = api
        .createType('Bytes', serializedSchema)
        .toU8a();
    const scaleEncodedCreator = api
        .createType('AccountId', Did.toChain(creator))
        .toU8a();
    const digest = blake2AsHex(Uint8Array.from([...scaleEncodedSchema, ...scaleEncodedCreator]));
    return Identifier.hashToUri(digest, SCHEMA_IDENT, SCHEMA_PREFIX);
}
/**
 * Verifies data against schema or schema against metaschema.
 *
 * @param object Data to be verified against schema.
 * @param schema Schema to verify against.
 * @param messages Optional empty array. If passed, this receives all verification errors.
 * @returns Whether or not verification was successful.
 */
export function verifyObjectAgainstSchema(object, schema, messages, referencedSchemas) {
    const validator = new JsonSchema.Validator(schema, '7', false);
    if (referencedSchemas) {
        referencedSchemas.forEach((i) => validator.addSchema(i));
    }
    const { valid, errors } = validator.validate(object);
    if (valid === true)
        return;
    if (messages) {
        errors.forEach((error) => {
            messages.push(error.error);
        });
    }
    throw new SDKErrors.ObjectUnverifiableError('JSON schema verification failed for object', { cause: errors });
}
/**
 *  Verifies the structure of the provided IContent['contents'] with ISchema.
 *
 * @param contents IContent['contents'] to be verified against the schema.
 * @param schema ISchema to be verified against the [SchemaModel].
 * @param messages An array, which will be filled by schema errors.
 *
 */
export function verifyContentAganistSchema(contents, schema, messages) {
    verifyObjectAgainstSchema(schema, SchemaModel, messages);
    verifyObjectAgainstSchema(contents, schema, messages);
}
/**
 * Checks on the CORD blockchain whether a schema is registered.
 *
 * @param schema Schema data.
 */
export async function verifyStored(schema) {
    const api = ConfigService.get('api');
    const identifier = Identifier.uriToIdentifier(schema.$id);
    const encoded = await api.query.schema.schemas(identifier);
    if (encoded.isNone)
        throw new SDKErrors.SchemaIdMissingError(`Schema with identifier ${identifier} is not registered on chain`);
}
/**
 * Checks whether the input meets all the required criteria of an ISchema object.
 * Throws on invalid input.
 *
 * @param input The ISchema object.
 */
export function verifySchemaStructure(input, creator) {
    verifyObjectAgainstSchema(input, SchemaModel);
    const uriFromSchema = getUriForSchema(input, creator);
    if (uriFromSchema !== input.$id) {
        throw new SDKErrors.SchemaIdMismatchError(uriFromSchema, input.$id);
    }
}
/**
 * Checks whether the schema input meets all the required criteria of an ISchema object.
 * Throws on invalid input.
 *
 * @param input The ISchem object.
 */
export function verifyDataStructure(input) {
    verifyObjectAgainstSchema(input, SchemaModel);
}
/**
 * Validates an array of [[CType]]s against a [[Claim]].
 *
 * @param cType - A [[CType]] that has nested [[CType]]s inside.
 * @param nestedCTypes - An array of [[CType]] schemas.
 * @param claimContents - The contents of a [[Claim]] to be validated.
 * @param messages - Optional empty array. If passed, this receives all verification errors.
 */
export function verifyContentAgainstNestedSchemas(schema, nestedSchemas, contents, messages) {
    verifyObjectAgainstSchema(schema, SchemaModel, messages);
    verifyObjectAgainstSchema(contents, schema, messages, nestedSchemas);
}
/**
 * Checks a SchemaMetadata object.
 *
 * @param metadata [[ISchemaMetadata]] that is to be instantiated.
 */
export function verifySchemaMetadata(metadata) {
    verifyObjectAgainstSchema(metadata, MetadataModel);
}
/**
 *  Creates a new [[ISchema]] object.
 *
 * @param title The new Schema's title as a string.
 * @param properties Key-value pairs describing the admissible atomic claims for a credential with this Schema. The value of each property is a json-schema (for example `{ "type": "number" }`) used to validate that property.
 * @param description A description of the Schema.
 * @param metadata Metadata for the Schema.
 * @returns A Schema object.
 */
export function fromProperties(title, properties, creator) {
    const schema = {
        properties,
        title,
        $schema: SchemaModelV1.$id,
        type: 'object',
    };
    schema.additionalProperties = false;
    const schemaType = jsonabc.sortObj({
        ...schema,
        $id: getUriForSchema(schema, creator),
    });
    verifySchemaStructure(schemaType, creator);
    return schemaType;
}
/**
 *  Custom Type Guard to determine input being of type ISchema.
 *
 * @param input The potentially only partial ISchema.
 * @returns Boolean whether input is of type ISchema.
 */
export function isISchema(input) {
    try {
        verifyDataStructure(input);
    }
    catch (error) {
        return false;
    }
    return true;
}
