/**
 * Schema.
 *
 * * A Schema is a description of the [[Stream]] data structure, based on [JSON Schema](http://json-schema.org/).
 * * Schemas are published and stored by the issuer.
 * * Permissioned users can use a Schema to create a new [[Stream]].
 *
 * @packageDocumentation
 * @module Schema
 * @preferred
 */
import type { DidUri, IContent, ISchema, ISchemaMetadata, SchemaHash } from '@cord.network/types';
import { JsonSchema } from '@cord.network/utils';
/**
 * Utility for (re)creating Schema hashes. Sorts the schema and strips the $id property (which contains the Schema hash) before stringifying.
 *
 * @param schema The Schema (with or without $id).
 * @returns A deterministic JSON serialization of a Schema, omitting the $id property.
 */
export declare function serializeForHash(schema: ISchema | Omit<ISchema, '$id'>): string;
/**
 * Calculates the Schema hash from schema properties.
 *
 * @param schema The Schema (with or without $id).
 * @returns Hash as hex string.
 */
export declare function getHashForSchema(schema: ISchema | Omit<ISchema, '$id'>): SchemaHash;
/**
 * Calculates the schema $id by hashing it.
 *
 * @param schema  Schema for which to create the id.
 * @returns Schema id uri.
 */
export declare function getUriForSchema(schema: ISchema | Omit<ISchema, '$id'>, creator: DidUri): ISchema['$id'];
/**
 * Verifies data against schema or schema against metaschema.
 *
 * @param object Data to be verified against schema.
 * @param schema Schema to verify against.
 * @param messages Optional empty array. If passed, this receives all verification errors.
 * @returns Whether or not verification was successful.
 */
export declare function verifyObjectAgainstSchema(object: Record<string, any>, schema: JsonSchema.Schema, messages?: string[], referencedSchemas?: JsonSchema.Schema[]): void;
/**
 *  Verifies the structure of the provided IContent['contents'] with ISchema.
 *
 * @param contents IContent['contents'] to be verified against the schema.
 * @param schema ISchema to be verified against the [SchemaModel].
 * @param messages An array, which will be filled by schema errors.
 *
 */
export declare function verifyContentAganistSchema(contents: IContent['contents'], schema: ISchema, messages?: string[]): void;
/**
 * Checks on the CORD blockchain whether a schema is registered.
 *
 * @param schema Schema data.
 */
export declare function verifyStored(schema: ISchema): Promise<void>;
/**
 * Checks whether the input meets all the required criteria of an ISchema object.
 * Throws on invalid input.
 *
 * @param input The ISchema object.
 */
export declare function verifySchemaStructure(input: ISchema, creator: DidUri): void;
/**
 * Checks whether the schema input meets all the required criteria of an ISchema object.
 * Throws on invalid input.
 *
 * @param input The ISchem object.
 */
export declare function verifyDataStructure(input: ISchema): void;
/**
 * Validates an array of [[CType]]s against a [[Claim]].
 *
 * @param cType - A [[CType]] that has nested [[CType]]s inside.
 * @param nestedCTypes - An array of [[CType]] schemas.
 * @param claimContents - The contents of a [[Claim]] to be validated.
 * @param messages - Optional empty array. If passed, this receives all verification errors.
 */
export declare function verifyContentAgainstNestedSchemas(schema: ISchema, nestedSchemas: ISchema[], contents: Record<string, any>, messages?: string[]): void;
/**
 * Checks a SchemaMetadata object.
 *
 * @param metadata [[ISchemaMetadata]] that is to be instantiated.
 */
export declare function verifySchemaMetadata(metadata: ISchemaMetadata): void;
/**
 *  Creates a new [[ISchema]] object.
 *
 * @param title The new Schema's title as a string.
 * @param properties Key-value pairs describing the admissible atomic claims for a credential with this Schema. The value of each property is a json-schema (for example `{ "type": "number" }`) used to validate that property.
 * @param description A description of the Schema.
 * @param metadata Metadata for the Schema.
 * @returns A Schema object.
 */
export declare function fromProperties(title: ISchema['title'], properties: ISchema['properties'], creator: DidUri): ISchema;
/**
 *  Custom Type Guard to determine input being of type ISchema.
 *
 * @param input The potentially only partial ISchema.
 * @returns Boolean whether input is of type ISchema.
 */
export declare function isISchema(input: unknown): input is ISchema;
