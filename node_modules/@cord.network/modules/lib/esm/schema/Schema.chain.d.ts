import type { Option } from '@polkadot/types';
import type { BlockNumber } from '@polkadot/types/interfaces';
import type { PalletSchemaSchemaEntry } from '@cord.network/augment-api';
import { SchemaHash, DidUri, ISchema, SchemaId } from '@cord.network/types';
/**
 * Encodes the provided Schema for use in `api.tx.schema.add()`.
 *
 * @param schema The Schema to write on the blockchain.
 * @returns Encoded Schema.
 */
export declare function toChain(schema: ISchema): string;
/**
 * Encodes the provided Schema['$id'] for use in `api.query.schema.schemas()`.
 *
 * @param schemaId The Schema id to translate for the blockchain.
 * @returns Encoded Schema id.
 */
export declare function idToChain(schemaId: ISchema['$id']): SchemaId;
/**
 * The details of a Schema that are stored on chain.
 */
export interface SchemaChainDetails {
    /**
     * The Schema.
     */
    schema: ISchema;
    /**
     * The Schema digest/hash.
     */
    schemaHash: SchemaHash;
    /**
     * The DID of the Schema's creator.
     */
    creator: DidUri;
    /**
     * The block number in which the Schema was created.
     */
    createdAt: BlockNumber;
}
export type ISchemaDetails = SchemaChainDetails;
/**
 * Decodes the Schema details returned by `api.query.schema.schemas()`.
 *
 * @param encoded The data from the blockchain.
 * @returns An object with on-chain Schema details.
 */
export declare function fromChain(encodedEntry: Option<PalletSchemaSchemaEntry>, schemaId: ISchema['$id']): SchemaChainDetails | null;
/**
 * Resolves a Schema identifier to the Schema definition by fetching data from the block containing the transaction that registered the Schema on chain.
 *
 * @param schemaId Schema ID to use for the query. It is required to complement the information stored on the blockchain in a [[PalletSchemaSchemaEntry]].
 *
 * @returns The [[ISchemaDetails]].
 */
export declare function fetchFromChain(schemaId: ISchema['$id']): Promise<ISchemaDetails | null>;
