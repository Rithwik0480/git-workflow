/**
 * CORD's core functionalities are exposed via connecting to its blockchain.
 *
 * To connect to the blockchain:
 * ```Cord.connect('ws://localhost:9944');```.
 */
import { ApiPromise } from '@polkadot/api';
import type { ApiOptions } from '@polkadot/api/types';
import { ConfigService } from '@cord.network/config';
/**
 * Prepares crypto modules (required for identity creation and others) and calls ConfigService.set().
 *
 * @param configs Arguments to pass on to ConfigService.set().
 * @returns Promise that must be awaited to assure crypto is ready.
 */
export declare function init<K extends Partial<ConfigService.configOpts>>(configs?: K): Promise<void>;
/**
 * Connects to the CORD Blockchain and passes the initialized api instance to `init()`, making it available for functions in the sdk.
 *
 * @param blockchainRpcWsUrl WebSocket URL of the RPC endpoint exposed by a node that is part of the CORD blockchain network you wish to connect to.
 * @param apiOpts Additional parameters to be passed to ApiPromise.create().
 * @param apiOpts.noInitWarn Allows suppressing warnings related to runtime types and augmentation.
 * By default warnings are shown if the global log level is 'warn' or lower and disabled on 'error' or higher.
 * @returns An instance of ApiPromise.
 */
export declare function connect(blockchainRpcWsUrl: string, { noInitWarn, // by default warnings are disabled on log level error and higher
...apiOpts }?: Omit<ApiOptions, 'provider'>): Promise<ApiPromise>;
/**
 * Disconnects the cached connection and clears the cache.
 *
 * @returns If there was a cached and connected connection, or not.
 */
export declare function disconnect(): Promise<boolean>;
