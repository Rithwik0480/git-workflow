import type { Option } from '@polkadot/types';
import type { IStream, IDocument, IStreamChain, StreamId } from '@cord.network/types';
import type { PalletStreamStreamEntry } from '@cord.network/augment-api';
/**
 * Encodes the provided stream for use in `api.tx.stream.create()`.
 *
 * @param stream The Stream to translate for the blockchain.
 * @returns Encoded Stream.
 */
export declare function toChain(content: IStream): IStreamChain;
/**
 * Encodes the provided Stream['$id'] for use in `api.query.schema.schemas()`.
 *
 * @param schemaId The Schema id to translate for the blockchain.
 * @returns Encoded Schema id.
 */
export declare function idToChain(streamId: IStream['identifier']): StreamId;
/**
 * Decodes the stream returned by `api.query.stream.streams()`.
 *
 * @param encoded Raw stream data from blockchain.
 * @param identifier The stream identifier.
 * @returns The stream.
 */
export declare function fromChain(encoded: Option<PalletStreamStreamEntry>, identifier: IDocument['identifier']): IStream;
