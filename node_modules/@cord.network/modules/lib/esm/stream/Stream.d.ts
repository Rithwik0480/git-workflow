import type { IStream, IDocument } from '@cord.network/types';
/**
 *  Checks whether the input meets all the required criteria of an [[IStream]] object.
 *  Throws on invalid input.
 *
 * @param input The potentially only partial [[IStream]].
 *
 */
export declare function verifyDataStructure(input: IStream): void;
/**
 * Builds a new instance of an [[Stream]], from a complete set of input required for an stream.
 *
 * @param document - The base request for stream.
 * @returns A new [[Stream]] object.
 *
 */
export declare function fromDocument(document: IDocument): IStream;
/**
 * Custom Type Guard to determine input being of type IStream using the StreamUtils errorCheck.
 *
 * @param input The potentially only partial IStream.
 * @returns Boolean whether input is of type IStream.
 */
export declare function isIStream(input: unknown): input is IStream;
/**
 * Verifies whether the data of the given attestation matches the one from the corresponding credential. It is valid if:
 * * the [[Credential]] object has valid data (see [[Credential.verifyDataIntegrity]]);
 * and
 * * the hash of the [[Credential]] object, and the hash of the [[Stream]].
 *
 * @param stream - The stream to verify.
 * @param document - The document to verify against.
 */
export declare function verifyAgainstDocument(stream: IStream, document: IDocument): void;
