import type { DidUri, DidResolveKey, Hash, IDocument, IStream, IContent, IDocumentPresentation, ISchema, SignCallback, IRegistryAuthorization, IRegistryAuthorizationDetails, IRegistry, StreamId, RegistryId } from '@cord.network/types';
import { HexString } from '@polkadot/util/types.js';
/**
 * Calculates the root hash of the document.
 *
 * @param document The document object.
 * @returns The document hash.
 */
export declare function calculateDocumentHash(document: Partial<IDocument>): Hash;
/**
 * Removes [[Content] properties from the [[Document]] object, provides anonymity and security when building the [[createPresentation]] method.
 *
 * @param document - The document object to remove properties from.
 * @param properties - Properties to remove from the [[Content]] object.
 * @returns A cloned Document with removed properties.
 */
export declare function removeContentProperties(document: IDocument, properties: string[]): IDocument;
/**
 * Prepares credential data for signing.
 *
 * @param input - The Stream to prepare the data for.
 * @param challenge - An optional challenge to be included in the signing process.
 * @returns The prepared signing data as Uint8Array.
 */
export declare function makeSigningData(input: IDocument, challenge?: string): Uint8Array;
export declare function verifyDocumentHash(input: IDocument): void;
/**
 * Verifies the data of the [[ContentStream]] object; used to check that the data was not tampered with, by checking the data against hashes.
 *
 * @param input - The [[Stream]] for which to verify data.
 */
export declare function verifyDataIntegrity(input: IDocument): void;
/**
 *  Checks whether the input meets all the required criteria of an IDocument object.
 *  Throws on invalid input.
 *
 * @param input - A potentially only partial [[IDocument]].
 *
 */
export declare function verifyDataStructure(input: IDocument): void;
export declare function verifyAuthorization(input: IContent, authorizationDetails: IRegistryAuthorizationDetails): void;
/**
 *  Checks the [[Document]] with a given [[SchemaType]] to check if the claim meets the [[schema]] structure.
 *
 * @param document A [[Document]] object of an anchored content used for verification.
 * @param schema A [[Schema]] to verify the [[Content]] structure.
 */
export declare function verifyAgainstSchema(document: IDocument, schema: ISchema): void;
/**
 * Verifies the signature of the [[IDocumentPresentation]].
 * the signature over the presentation **must** be generated with the DID in order for the verification to be successful.
 *
 * @param input - The [[IPresentation]].
 * @param verificationOpts Additional verification options.
 * @param verificationOpts.didResolveKey - The function used to resolve the claimer's key. Defaults to [[resolveKey]].
 * @param verificationOpts.challenge - The expected value of the challenge. Verification will fail in case of a mismatch.
 */
export declare function verifySignature(input: IDocumentPresentation, { challenge, didResolveKey, }?: {
    challenge?: string;
    didResolveKey?: DidResolveKey;
}): Promise<void>;
/**
 * Calculates the stream Id by hashing it.
 *
 * @param stream  Stream for which to create the id.
 * @returns Stream id uri.
 */
export declare function getUriForStream(streamDigest: HexString, registry: RegistryId, creator: DidUri): StreamId;
export type Options = {
    evidenceIds?: IDocument[];
    expiresAt?: Date | null;
    templates?: string[];
    labels?: string[];
};
/**
 * Builds a new  [[IDocument]] object, from a complete set of required parameters.
 *
 * @param content An `IContent` object to build the document for.
 * @param option Container for different options that can be passed to this method.
 * @param authorization The authrization id of the Issuer, which should be used in anchoring the document.
 * @param registry Identifier of the registry this document is linked to.
 * @param option.evidenceIds Array of [[Document]] objects the Issuer include as evidenceIds.
 * @returns A new [[IDocument]] object.
 */
export declare function fromContent({ content, authorization, registry, signCallback, options, }: {
    content: IContent;
    authorization: IRegistryAuthorization['identifier'];
    registry: IRegistry['identifier'];
    signCallback: SignCallback;
    options: Options;
}): Promise<IDocument>;
type VerifyOptions = {
    schema?: ISchema;
    challenge?: string;
    didResolveKey?: DidResolveKey;
};
/**
 * Verifies data structure & data integrity of a credential object.
 *
 * @param document - The object to check.
 * @param options - Additional parameter for more verification steps.
 * @param options.schema - Schema to be checked against.
 */
export declare function verifyDocument(document: IDocument, { schema }?: VerifyOptions): Promise<void>;
/**
 * Verifies data structure, data integrity and the holder's signature of a document presentation.
 *
 * Upon presentation of a document, a verifier would call this function.
 *
 * @param presentation - The object to check.
 * @param options - Additional parameter for more verification steps.
 * @param options.schema - Schema which the included document should be checked against.
 * @param options.challenge -  The expected value of the challenge. Verification will fail in case of a mismatch.
 * @param options.didResolveKey - The function used to resolve the holders's key. Defaults to [[resolveKey]].
 */
export declare function verifyPresentation(presentation: IDocumentPresentation, { schema, challenge, didResolveKey }?: VerifyOptions): Promise<void>;
/**
 * Type Guard to determine input being of type [[IDocument]].
 *
 * @param input - A potentially only partial [[IDocument]].
 *
 * @returns  Boolean whether input is of type IDocument.
 */
export declare function isIDocument(input: unknown): input is IDocument;
/**
 * Type Guard to determine input being of type [[IDocumentPresentation]].
 *
 * @param input - An [[IDocument]], [[IDocumentPresentation]], or other object.
 *
 * @returns  Boolean whether input is of type IDocumentPresentation.
 */
export declare function isPresentation(input: unknown): input is IDocumentPresentation;
/**
 * Gets the hash of the document.
 *
 * @param document - The document to get the hash from.
 * @returns The hash of the credential.
 */
export declare function getHash(document: IDocument): IStream['streamHash'];
/**
 * Creates a public presentation which can be sent to a verifier.
 * This presentation is signed.
 *
 * @param presentationOptions The additional options to use upon presentation generation.
 * @param presentationOptions.document The document to create the presentation for.
 * @param presentationOptions.signCallback The callback to sign the presentation.
 * @param presentationOptions.selectedAttributes All properties of the credential which have been requested by the verifier and therefore must be publicly presented.
 * @param presentationOptions.challenge Challenge which will be part of the presentation signature.
 * If not specified, all attributes are shown. If set to an empty array, we hide all attributes inside the claim for the presentation.
 * @returns A deep copy of the Credential with selected attributes.
 */
export declare function createPresentation({ document, signCallback, selectedAttributes, challenge, }: {
    document: IDocument;
    signCallback: SignCallback;
    selectedAttributes?: string[];
    challenge?: string;
}): Promise<IDocumentPresentation>;
export {};
