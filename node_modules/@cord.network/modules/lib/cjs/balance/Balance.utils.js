"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromPicoWay = exports.toPicoWay = exports.balanceNumberToString = exports.TRANSACTION_FEE = exports.convertToTxUnit = exports.formatWayBalance = exports.Prefixes = exports.WAY_UNIT = void 0;
const util_1 = require("@polkadot/util");
exports.WAY_UNIT = new util_1.BN(1);
exports.Prefixes = new Map([
    ['pico', -12],
    ['nano', -9],
    ['micro', -6],
    ['milli', -3],
    ['centi', -2],
    ['WAY', 0],
    ['kilo', 3],
    ['mega', 6],
    ['mill', 6],
    ['giga', 9],
    ['bill', 9],
    ['tera', 12],
    ['tril', 12],
    ['peta', 15],
    ['exa', 18],
    ['zetta', 21],
    ['yotta', 24],
]);
/**
 * Uses the polkadot.js balance formatter, to convert given BN to a human readable prefixed number.
 *
 * @param amount BN to format.
 * @param additionalOptions Optional formatting settings, these are defaulted to CORD specific settings.
 * @returns String representation of the given BN with prefix and unit ('WAY' as default).
 */
function formatWayBalance(amount, additionalOptions) {
    const options = {
        decimals: 12,
        withSiFull: true,
        withUnit: 'WAY',
        ...additionalOptions,
    };
    return (0, util_1.formatBalance)(amount, options);
}
exports.formatWayBalance = formatWayBalance;
/**
 * Converts balance from WAY denomination to base unit.
 *
 * @param balance Balance in WAY denomination.
 * @param power Allows modifying conversion. Set to 0 for conversion to base unit, set to <0 for various larger denominations. -12 is WAY denomination.
 * @returns Converted (redenominated) balance.
 */
function convertToTxUnit(balance, power) {
    return new util_1.BN(balance).mul(new util_1.BN(10).pow(new util_1.BN(12 + power)));
}
exports.convertToTxUnit = convertToTxUnit;
exports.TRANSACTION_FEE = convertToTxUnit(new util_1.BN(125), -9);
/**
 * Safely converts the given [[BalanceNumber]] to a string, using the supplied methods,
 * or it given a string checks for valid number representation.
 *
 * @param input [[BalanceNumber]] to convert.
 * @returns String representation of the given [[BalanceNumber]].
 * @throws On invalid number representation if given a string.
 * @throws On malformed input.
 */
function balanceNumberToString(input) {
    if (typeof input === 'string') {
        if (!input.match(/^-?\d*\.?\d+$/)) {
            throw new Error('not a string representation of number');
        }
        return input;
    }
    if (typeof input === 'number' ||
        (typeof input === 'bigint' && input.toString) ||
        (typeof input === 'object' && input instanceof util_1.BN && input.toString)) {
        return input.toString();
    }
    throw new Error('could not convert to String');
}
exports.balanceNumberToString = balanceNumberToString;
/**
 * Converts the given [[BalanceNumber]] to the pico WAY equivalent.
 *
 * @param input [[BalanceNumber]] to convert.
 * @param unit Metric prefix of the given [[BalanceNumber]].
 * @returns Exact BN representation in picoWay, to use in transactions and calculations.
 * @throws Unknown metricPrefix, or if the input has too many decimal places for it's unit.
 */
function toPicoWay(input, unit = 'WAY') {
    const stringRepresentation = balanceNumberToString(input);
    if (!exports.Prefixes.has(unit)) {
        throw new Error('Unknown metric prefix');
    }
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const unitVal = exports.Prefixes.get(unit);
    const negative = stringRepresentation.substring(0, 1) === '-';
    const [integer, fraction] = negative
        ? stringRepresentation.substring(1).split('.')
        : stringRepresentation.split('.');
    if (fraction && fraction.length > unitVal + 12) {
        throw new Error(`Too many decimal places: input with unit ${unit} and value ${stringRepresentation} exceeds the ${unitVal + 12} possible decimal places by ${fraction.length - unitVal + 12}`);
    }
    const fractionBN = fraction
        ? convertToTxUnit(new util_1.BN(fraction), unitVal - fraction.length)
        : new util_1.BN(0);
    const resultingBN = convertToTxUnit(new util_1.BN(integer), unitVal).add(fractionBN);
    return resultingBN.mul(new util_1.BN(negative ? -1 : 1));
}
exports.toPicoWay = toPicoWay;
/**
 * Converts the given [[BalanceNumber]] to a human readable number with metric prefix and Unit.
 * This function uses the polkadot formatBalance function,
 * it's output can therefore be formatted via the polkadot formatting options.
 *
 * @param input [[BalanceNumber]] to convert from Pico WAY.
 * @param decimals Set the minimum decimal places in the formatted localized output, default is 4.
 * @param options [[BalanceOptions]] for internationalization and formatting.
 * @returns String representation of the given [[BalanceNumber]] with unit und metric prefix.
 */
function fromPicoWay(input, decimals = 4, options = {}) {
    const inputBN = new util_1.BN(balanceNumberToString(input));
    // overwriting the locale as parsing a number from a string only works with English locale formatted numbers
    const formatted = formatWayBalance(inputBN, { ...options, locale: 'en' });
    const [number, ...rest] = formatted.split(' ');
    const localeNumber = new Intl.NumberFormat(options.locale, {
        minimumFractionDigits: decimals + 1,
        maximumFractionDigits: decimals + 1,
    }).format(Number(number));
    return `${localeNumber.slice(0, localeNumber.length - 1)} ${rest.join(' ')}`;
}
exports.fromPicoWay = fromPicoWay;
