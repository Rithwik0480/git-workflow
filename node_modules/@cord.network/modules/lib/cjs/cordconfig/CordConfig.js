"use strict";
/**
 * CORD's core functionalities are exposed via connecting to its blockchain.
 *
 * To connect to the blockchain:
 * ```Cord.connect('ws://localhost:9944');```.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.disconnect = exports.connect = exports.init = void 0;
const util_crypto_1 = require("@polkadot/util-crypto");
const api_1 = require("@polkadot/api");
const config_1 = require("@cord.network/config");
const type_definitions_1 = require("@cord.network/type-definitions");
/**
 * Prepares crypto modules (required for identity creation and others) and calls ConfigService.set().
 *
 * @param configs Arguments to pass on to ConfigService.set().
 * @returns Promise that must be awaited to assure crypto is ready.
 */
async function init(configs) {
    config_1.ConfigService.set(configs || {});
    await (0, util_crypto_1.cryptoWaitReady)();
}
exports.init = init;
/**
 * Connects to the CORD Blockchain and passes the initialized api instance to `init()`, making it available for functions in the sdk.
 *
 * @param blockchainRpcWsUrl WebSocket URL of the RPC endpoint exposed by a node that is part of the CORD blockchain network you wish to connect to.
 * @param apiOpts Additional parameters to be passed to ApiPromise.create().
 * @param apiOpts.noInitWarn Allows suppressing warnings related to runtime types and augmentation.
 * By default warnings are shown if the global log level is 'warn' or lower and disabled on 'error' or higher.
 * @returns An instance of ApiPromise.
 */
async function connect(blockchainRpcWsUrl, { noInitWarn = config_1.ConfigService.get('logLevel') > 3, // by default warnings are disabled on log level error and higher
...apiOpts } = {}) {
    const provider = new api_1.WsProvider(blockchainRpcWsUrl);
    const api = await api_1.ApiPromise.create({
        provider,
        typesBundle: type_definitions_1.typesBundle,
        noInitWarn,
        ...apiOpts,
    });
    await init({ api });
    return api.isReadyOrError;
}
exports.connect = connect;
/**
 * Disconnects the cached connection and clears the cache.
 *
 * @returns If there was a cached and connected connection, or not.
 */
async function disconnect() {
    if (!config_1.ConfigService.isSet('api'))
        return false;
    const api = config_1.ConfigService.get('api');
    config_1.ConfigService.unset('api');
    await api.disconnect();
    return true;
}
exports.disconnect = disconnect;
