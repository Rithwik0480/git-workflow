import type { HexString } from '@polkadot/util/types';
import type { DidUri, IContent, ISchema, PartialContent } from '@cord.network/types';
import { Crypto } from '@cord.network/utils';
/**
 * Produces JSON-LD readable representations of the content. This is done by implicitly or explicitly transforming property keys to globally unique predicates.
 * Where possible these predicates are taken directly from the Verifiable Credentials vocabulary. Properties that are unique to a [[Schema]] are transformed to predicates by prepending the [[Schema]][schema][$id].
 *
 * @param claim A (partial) [[IContent]] from to build a JSON-LD representation from. The `identifier` property is required.
 * @param expanded Return an expanded instead of a compacted representation. While property transformation is done explicitly in the expanded format, it is otherwise done implicitly via adding JSON-LD's reserved `@context` properties while leaving [[IContent]][contents] property keys untouched.
 * @returns An object which can be serialized into valid JSON-LD representing an [[IContent]].
 */
export declare function toJsonLD(content: PartialContent, expanded?: boolean): Record<string, unknown>;
/**
 * Produces salted hashes of individual statements comprising a (partial) [[IContent]] to enable selective disclosure of contents. Can also be used to reproduce hashes for the purpose of validation.
 *
 * @param content Full or partial [[IContent]] to produce statement hashes from.
 * @param options Object containing optional parameters.
 * @param options.canonicalisation Canonicalisation routine that produces an array of statement strings from the [IContent]. Default produces individual `{"key":"value"}` JSON representations where keys are transformed to expanded JSON-LD.
 * @param options.nonces Optional map of nonces as produced by this function.
 * @param options.nonceGenerator Nonce generator as defined by [[hashStatements]] to be used if no `nonces` are given. Default produces random UUIDs (v4).
 * @param options.hasher The hasher to be used. Required but defaults to 256 bit blake2 over `${nonce}${statement}`.
 * @returns An array of salted `hashes` and a `nonceMap` where keys correspond to unsalted statement hashes.
 */
export declare function hashContents(content: PartialContent, options?: Crypto.HashingOptions & {
    canonicalisation?: (content: PartialContent) => string[];
}): {
    hashes: HexString[];
    nonceMap: Record<string, string>;
};
/**
 * Used to verify the hash list based proof over the set of disclosed attributes in [[Content]].
 *
 * @param content Full or partial [[IContent]] to verify proof against.
 * @param proof Proof consisting of a map that matches nonces to statement digests and the resulting hashes.
 * @param proof.nonces A map where a statement digest as produces by options.hasher is mapped to a nonce.
 * @param proof.hashes Array containing hashes which are signed into the credential. Should result from feeding statement digests and nonces in proof.nonce to options.hasher.
 * @param options Object containing optional parameters.
 * @param options.canonicalisation Canonicalisation routine that produces an array of statement strings from the [IContent]. Default produces individual `{"key":"value"}` JSON representations where keys are transformed to expanded JSON-LD.
 * @param options.hasher The hasher to be used. Required but defaults to 256 bit blake2 over `${nonce}${statement}`.
 */
export declare function verifyDisclosedAttributes(content: PartialContent, proof: {
    nonces: Record<string, string>;
    hashes: string[];
}, options?: Pick<Crypto.HashingOptions, 'hasher'> & {
    canonicalisation?: (content: PartialContent) => string[];
}): void;
/**
 *  Checks whether the input meets all the required criteria of an [[IContent]] object.
 *  Throws on invalid input.
 *
 * @param input The potentially only partial IContent.
 *
 */
export declare function verifyDataStructure(input: IContent | PartialContent): void;
/**
 * Verifies the data structure and schema of a Claim.
 *
 * @param inputContent IContent to verify.
 * @param schema ISchema to verify inputContent.
 */
export declare function verify(inputContent: IContent, schema: ISchema): void;
/**
 * Builds a [[Content]] stream from [[IContent]] and nested [[ISchema]]s.
 *
 * @param schema A [[Schema]] object that has nested [[Schema]]s.
 * @param nestedSchemas The array of [[Schema]]s, which are used inside the main [[Schema]].
 * @param contents The data inside the [[Content]].
 * @param holder The holder of the [[Content]].
 *
 * @returns A validated [[Content]] stream.
 */
export declare function fromNestedSchemaAndContent(schema: ISchema, nestedSchemas: ISchema[], contents: IContent['contents'], holder: DidUri, issuer: DidUri): IContent;
/**
 * Builds a new Content stream from [[ISchema]], IContent['contents'] and issuer's [[DidUri]].
 *
 * @param schema [[ISchema]] on which the content is based on.
 * @param contents IContent['contents'] to be used as the data of the instantiated Content stream.
 * @param holder The DID to be used as the holder.
 * @returns A Content object.
 */
export declare function fromSchemaAndContent(schema: ISchema, contents: IContent['contents'], holder: DidUri, issuer: DidUri): IContent;
/**
 *  Custom Type Guard to determine input being of type IContent
 *
 * @param input The potentially only partial IContent.
 *
 * @returns Boolean whether input is of type IContent.
 */
export declare function isIContent(input: unknown): input is IContent;
