"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encrypt = exports.fromBody = exports.verify = exports.decrypt = exports.ensureOwnerIsSender = exports.verifyRequiredSchemaProperties = exports.verifyMessageEnvelope = exports.verifyMessageBody = void 0;
const tslib_1 = require("tslib");
const modules_1 = require("@cord.network/modules");
const utils_1 = require("@cord.network/utils");
const Did = tslib_1.__importStar(require("@cord.network/did"));
const util_1 = require("@polkadot/util");
/**
 * Checks if the message body is well-formed.
 *
 * @param body The message body.
 */
function verifyMessageBody(body) {
    switch (body.type) {
        case 'request-document-stream': {
            modules_1.Document.verifyDataStructure(body.content.document);
            break;
        }
        case 'submit-document-stream': {
            modules_1.Stream.verifyDataStructure(body.content.stream);
            break;
        }
        case 'reject-document-stream': {
            if (!(0, util_1.isHex)(body.content)) {
                throw new utils_1.SDKErrors.HashMalformedError();
            }
            break;
        }
        case 'request-credential-document': {
            body.content.schemas.forEach(({ schemaId, trustedIssuers, requiredProperties }) => {
                utils_1.DataUtils.validateId(schemaId, 'Schema Identiifier');
                trustedIssuers?.forEach((did) => Did.validateUri(did, 'Did'));
                requiredProperties?.forEach((requiredProps) => {
                    if (typeof requiredProps !== 'string')
                        throw new TypeError('Required properties is expected to be a string');
                });
            });
            break;
        }
        case 'submit-credential-document': {
            body.content.forEach((presentation) => {
                modules_1.Document.verifyDataStructure(presentation);
                if (!Did.isDidSignature(presentation.holderSignature)) {
                    throw new utils_1.SDKErrors.SignatureMalformedError();
                }
            });
            break;
        }
        case 'accept-credential-document': {
            body.content.forEach((schemaId) => utils_1.DataUtils.validateId(schemaId, 'Schema Identiifier'));
            break;
        }
        case 'reject-credential-document': {
            body.content.forEach((schemaId) => utils_1.DataUtils.validateId(schemaId, 'Schema Identiifier'));
            break;
        }
        default:
            throw new utils_1.SDKErrors.UnknownMessageBodyTypeError();
    }
}
exports.verifyMessageBody = verifyMessageBody;
/**
 * Checks if the message object is well-formed.
 *
 * @param message The message object.
 */
function verifyMessageEnvelope(message) {
    const { messageId, createdAt, receiver, sender, receivedAt, inReplyTo } = message;
    if (messageId !== undefined && typeof messageId !== 'string') {
        throw new TypeError('Message id is expected to be a string');
    }
    if (createdAt !== undefined && typeof createdAt !== 'number') {
        throw new TypeError('Created at is expected to be a number');
    }
    if (receivedAt !== undefined && typeof receivedAt !== 'number') {
        throw new TypeError('Received at is expected to be a number');
    }
    Did.validateUri(sender, 'Did');
    Did.validateUri(receiver, 'Did');
    if (inReplyTo && typeof inReplyTo !== 'string') {
        throw new TypeError('In reply to is expected to be a string');
    }
}
exports.verifyMessageEnvelope = verifyMessageEnvelope;
/**
 * Verifies required properties for a given [[Schema]] before sending or receiving a message.
 *
 * @param requiredProperties The list of required properties that need to be verified against a [[Schema]].
 * @param schema A [[Schema]] used to verify the properties.
 */
function verifyRequiredSchemaProperties(requiredProperties, schema) {
    modules_1.Schema.verifyDataStructure(schema);
    const unknownProperties = requiredProperties.find((property) => !(property in schema.properties));
    if (unknownProperties) {
        throw new utils_1.SDKErrors.SchemaUnknownPropertiesError();
    }
}
exports.verifyRequiredSchemaProperties = verifyRequiredSchemaProperties;
/**
 * Verifies that the sender of a [[Message]] is also the owner of it, e.g the owner's and sender's DIDs refer to the same subject.
 *
 * @param message The [[Message]] object which needs to be decrypted.
 * @param message.body The body of the [[Message]] which depends on the [[BodyType]].
 * @param message.sender The sender's DID taken from the [[IMessage]].
 */
function ensureOwnerIsSender({ body, sender }) {
    switch (body.type) {
        case 'request-document-stream':
            {
                const requestStream = body;
                if (!Did.isSameSubject(requestStream.content.document.content.holder, sender)) {
                    throw new utils_1.SDKErrors.IdentityMismatchError('Content', 'Sender');
                }
            }
            break;
        case 'submit-document-stream':
            {
                const submitStream = body;
                if (!Did.isSameSubject(submitStream.content.stream.issuer, sender)) {
                    throw new utils_1.SDKErrors.IdentityMismatchError('Stream', 'Sender');
                }
            }
            break;
        case 'submit-credential-document':
            {
                const submitContentForSchema = body;
                submitContentForSchema.content.forEach((presentation) => {
                    if (!Did.isSameSubject(presentation.content.holder, sender)) {
                        throw new utils_1.SDKErrors.IdentityMismatchError('Claims', 'Sender');
                    }
                });
            }
            break;
        default:
    }
}
exports.ensureOwnerIsSender = ensureOwnerIsSender;
/**
 * Symmetrically decrypts the result of [[encrypt]].
 *
 * @param encrypted The encrypted message.
 * @param decryptCallback The callback to decrypt with the secret key.
 * @param decryptionOptions Options to perform the decryption operation.
 * @param decryptionOptions.resolveKey The DID key resolver to use.
 * @returns The original [[Message]].
 */
async function decrypt(encrypted, decryptCallback, { resolveKey = Did.resolveKey, } = {}) {
    const { senderKeyUri, receiverKeyUri, ciphertext, nonce, receivedAt } = encrypted;
    const senderKeyDetails = await resolveKey(senderKeyUri, 'keyAgreement');
    const { fragment } = Did.parse(receiverKeyUri);
    if (!fragment) {
        throw new utils_1.SDKErrors.DidError(`No fragment for the receiver key ID "${receiverKeyUri}"`);
    }
    let data;
    try {
        data = (await decryptCallback({
            peerPublicKey: senderKeyDetails.publicKey,
            data: (0, util_1.hexToU8a)(ciphertext),
            nonce: (0, util_1.hexToU8a)(nonce),
            keyUri: receiverKeyUri,
        })).data;
    }
    catch (cause) {
        throw new utils_1.SDKErrors.DecodingMessageError(undefined, {
            cause: cause,
        });
    }
    const decoded = (0, util_1.u8aToString)(data);
    const { body, createdAt, messageId, inReplyTo, references, sender, receiver, } = JSON.parse(decoded);
    const decrypted = {
        receiver,
        sender,
        createdAt,
        body,
        messageId,
        receivedAt,
        inReplyTo,
        references,
    };
    if (sender !== senderKeyDetails.controller) {
        throw new utils_1.SDKErrors.IdentityMismatchError('Encryption key', 'Sender');
    }
    return decrypted;
}
exports.decrypt = decrypt;
/**
 * Checks the message structure and body contents (e.g. Hashes match, ensures the owner is the sender).
 * Throws, if a check fails.
 *
 * @param decryptedMessage The decrypted message to check.
 */
function verify(decryptedMessage) {
    verifyMessageBody(decryptedMessage.body);
    verifyMessageEnvelope(decryptedMessage);
    ensureOwnerIsSender(decryptedMessage);
}
exports.verify = verify;
/**
 * Constructs a message from a message body.
 * This should be encrypted with [[encrypt]] before sending to the receiver.
 *
 * @param body The body of the message.
 * @param sender The DID of the sender.
 * @param receiver The DID of the receiver.
 * @returns The message created.
 */
function fromBody(body, sender, receiver) {
    return {
        body,
        createdAt: Date.now(),
        receiver,
        sender,
        messageId: utils_1.UUID.generate(),
    };
}
exports.fromBody = fromBody;
/**
 * Encrypts the [[Message]] as a string. This can be reversed with [[decrypt]].
 *
 * @param message The message to encrypt.
 * @param encryptCallback The callback to encrypt with the secret key.
 * @param receiverKeyUri The key URI of the receiver.
 * @param encryptionOptions Options to perform the encryption operation.
 * @param encryptionOptions.resolveKey The DID key resolver to use.
 *
 * @returns The encrypted version of the original [[Message]], see [[IEncryptedMessage]].
 */
async function encrypt(message, encryptCallback, receiverKeyUri, { resolveKey = Did.resolveKey, } = {}) {
    const receiverKey = await resolveKey(receiverKeyUri, 'keyAgreement');
    if (message.receiver !== receiverKey.controller) {
        throw new utils_1.SDKErrors.IdentityMismatchError('receiver public key', 'receiver');
    }
    const toEncrypt = {
        body: message.body,
        createdAt: message.createdAt,
        sender: message.sender,
        receiver: message.receiver,
        messageId: message.messageId,
        inReplyTo: message.inReplyTo,
        references: message.references,
    };
    const serialized = (0, util_1.stringToU8a)(JSON.stringify(toEncrypt));
    const encrypted = await encryptCallback({
        did: message.sender,
        data: serialized,
        peerPublicKey: receiverKey.publicKey,
    });
    const ciphertext = (0, util_1.u8aToHex)(encrypted.data);
    const nonce = (0, util_1.u8aToHex)(encrypted.nonce);
    return {
        receivedAt: message.receivedAt,
        ciphertext,
        nonce,
        senderKeyUri: encrypted.keyUri,
        receiverKeyUri: receiverKey.id,
    };
}
exports.encrypt = encrypt;
