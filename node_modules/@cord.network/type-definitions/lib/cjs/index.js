"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.typesBundle = exports.types = exports.didCalls = exports.cordSignedExtensions = void 0;
const types_7_js_1 = require("./types_7.js");
const types_8_js_1 = require("./types_8.js");
Object.defineProperty(exports, "types", { enumerable: true, get: function () { return types_8_js_1.types8; } });
const did_js_1 = require("./runtime/did.js");
const signedExtensions_1 = require("./signedExtensions");
var signedExtensions_2 = require("./signedExtensions");
Object.defineProperty(exports, "cordSignedExtensions", { enumerable: true, get: function () { return signedExtensions_2.cordSignedExtensions; } });
var did_js_2 = require("./runtime/did.js");
Object.defineProperty(exports, "didCalls", { enumerable: true, get: function () { return did_js_2.calls; } });
const defaultTypesBundle = [
    {
        minmax: [0, 7999],
        types: types_7_js_1.types7,
    },
    {
        minmax: [8000, undefined],
        types: types_8_js_1.types8,
    },
];
// Current runtime version: 8000
exports.typesBundle = {
    chain: {
        'Cord Sprintnet': {
            runtime: {
                ...did_js_1.calls,
            },
            signedExtensions: {
                ...signedExtensions_1.cordSignedExtensions,
            },
            types: defaultTypesBundle,
        },
        'Cord Sparknet': {
            runtime: {
                ...did_js_1.calls,
            },
            signedExtensions: {
                ...signedExtensions_1.cordSignedExtensions,
            },
            types: defaultTypesBundle,
        },
        "Cord Spin": {
            runtime: {
                ...did_js_1.calls,
            },
            signedExtensions: {
                ...signedExtensions_1.cordSignedExtensions,
            },
            types: defaultTypesBundle,
        },
        "Cord Ignite": {
            runtime: {
                ...did_js_1.calls,
            },
            signedExtensions: {
                ...signedExtensions_1.cordSignedExtensions,
            },
            types: defaultTypesBundle,
        },
    },
};
