/**
 * SDKErrors are CORD-specific errors, with associated codes and descriptions.
 *
 * @packageDocumentation
 * @module SDKErrors
 */
export declare class SDKError extends Error {
    constructor(...args: ConstructorParameters<ErrorConstructor>);
}
export declare class UnauthorizedError extends SDKError {
}
export declare class UnsupportedKeyError extends SDKError {
    constructor(keyType: string);
}
export declare class BlockchainApiMissingError extends SDKError {
    constructor(options?: ErrorOptions);
}
export declare class InputContentsMalformedError extends SDKError {
}
export declare class EncryptionError extends SDKError {
}
export declare class DidError extends SDKError {
}
export declare class DidExporterError extends SDKError {
}
export declare class DidBatchError extends SDKError {
}
export declare class DidNotFoundError extends SDKError {
}
export declare class DidResolveUpgradedDidError extends SDKError {
}
export declare class DidDeactivatedError extends SDKError {
}
export declare class AddressTypeError extends SDKError {
}
export declare class SignatureMalformedError extends SDKError {
}
export declare class SignatureUnverifiableError extends SDKError {
}
export declare class ObjectUnverifiableError extends SDKError {
}
export declare class SchemaIdMissingError extends SDKError {
}
export declare class SchemaError extends SDKError {
}
export declare class SchemaUnknownPropertiesError extends SDKError {
}
export declare class SchemaIdentifierMissingError extends SDKError {
}
export declare class RegistryIdentifierMissingError extends SDKError {
}
export declare class AuthorizationIdentifierMissingError extends SDKError {
}
export declare class SchemaIdMismatchError extends SDKError {
    constructor(fromSchema: string, provided: string);
}
export declare class NestedContentUnverifiableError extends SDKError {
}
export declare class RootHashUnverifiableError extends SDKError {
}
export declare class ContentHashMissingError extends SDKError {
}
export declare class RevokedTypeError extends SDKError {
}
export declare class HolderMissingError extends SDKError {
}
export declare class IssuerMismatchError extends SDKError {
}
export declare class SchemaMismatchError extends SDKError {
}
export declare class SubjectMissingError extends SDKError {
}
export declare class EvidenceMissingError extends SDKError {
}
export declare class ContentNonceMapMissingError extends SDKError {
}
export declare class ContentMissingError extends SDKError {
}
export declare class HashTypeError extends SDKError {
}
export declare class IdentifierMissingError extends SDKError {
}
export declare class StreamHashMissingError extends SDKError {
}
export declare class IssuerMissingError extends SDKError {
}
export declare class CredentialUnverifiableError extends SDKError {
}
export declare class ContentNonceMapMalformedError extends SDKError {
    constructor(statement?: string);
}
export declare class CreatorMissingError extends SDKError {
}
export declare class RegistryInputMalformedError extends SDKError {
}
export declare class DelegateMissingError extends SDKError {
}
export declare class SchemaMissingError extends SDKError {
}
export declare class AuthorizationIdMissingError extends SDKError {
}
export declare class DataStructureError extends SDKError {
}
export declare class IdentityMismatchError extends SDKError {
    constructor(context?: string, type?: string);
}
export declare class UnknownMessageBodyTypeError extends SDKError {
}
export declare class InvalidDidFormatError extends SDKError {
    constructor(did: string, options?: ErrorOptions);
}
export declare class DidSubjectMismatchError extends SDKError {
    constructor(actual: string, expected: string);
}
export declare class AddressInvalidError extends SDKError {
    constructor(id?: string, type?: string);
}
export declare class IdentifierInvalidError extends SDKError {
    constructor(address?: string, type?: string);
}
export declare class HashMalformedError extends SDKError {
    constructor(hash?: string, type?: string);
}
export declare class InvalidProofForStatementError extends SDKError {
    constructor(statement: string);
}
export declare class NoProofForStatementError extends SDKError {
    constructor(statement: string);
}
export declare class ContentUnverifiableError extends SDKError {
}
export declare class SubscriptionsNotSupportedError extends SDKError {
    constructor(options?: ErrorOptions);
}
export declare class DecodingMessageError extends SDKError {
}
export declare class TimeoutError extends SDKError {
}
export declare class CodecMismatchError extends SDKError {
}
