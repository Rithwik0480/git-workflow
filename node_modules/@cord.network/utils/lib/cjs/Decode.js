"use strict";
/**
 * @packageDocumentation
 * @module Decode
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.hexToString = exports.assertCodecIsType = exports.codecIsType = void 0;
/**
 * Dummy comment needed for correct doc display, do not remove.
 */
/**
 * Checks nested codec types against a type description string. Uses `codec.toRawType()` internally.
 *
 * @param codec The codec to type check.
 * @param types An array of strings denoting types to check against.
 * @returns Whether the codec type is any of the allowed `types`.
 */
function codecIsType(codec, types) {
    return types.includes(codec.toRawType());
}
exports.codecIsType = codecIsType;
/**
 * Checks nested codec types against a type description string. Uses `codec.toRawType()` internally.
 *
 * @param codec The codec to type check.
 * @param types An array of strings denoting types to check against.
 * @throws `TypeError` If codec type is not contained in the allowed `types`.
 */
function assertCodecIsType(codec, types) {
    if (!codecIsType(codec, types))
        throw new TypeError(`expected Codec type(s) ${types}, got ${codec.toRawType()}`);
}
exports.assertCodecIsType = assertCodecIsType;
/**
 * Convert from hex to string
 * @param hex Hex string with prefix `0x`
 * @returns With string back
 */
function hexToString(hex) {
    return Buffer.from(hex.substring(2), 'hex').toString();
}
exports.hexToString = hexToString;
