import { DidResourceUri, DidUri, DidVerificationKey, CordAddress, UriFragment } from '@cord.network/types';
type IDidParsingResult = {
    did: DidUri;
    version: number;
    type: 'full';
    address: CordAddress;
    fragment?: UriFragment;
    authKeyTypeEncoding?: string;
    encodedDetails?: string;
};
/**
 * Parses a CORD DID uri and returns the information contained within in a structured form.
 *
 * @param didUri A CORD DID uri as a string.
 * @returns Object containing information extracted from the DID uri.
 */
export declare function parse(didUri: DidUri | DidResourceUri): IDidParsingResult;
/**
 * Returns true if both didA and didB refer to the same DID subject, i.e., whether they have the same identifier as specified in the method spec.
 *
 * @param didA A CORD DID uri as a string.
 * @param didB A second CORD DID uri as a string.
 * @returns Whether didA and didB refer to the same DID subject.
 */
export declare function isSameSubject(didA: DidUri, didB: DidUri): boolean;
export type EncodedVerificationKey = {
    sr25519: Uint8Array;
} | {
    ed25519: Uint8Array;
} | {
    ecdsa: Uint8Array;
};
export type EncodedEncryptionKey = {
    x25519: Uint8Array;
};
export type EncodedKey = EncodedVerificationKey | EncodedEncryptionKey;
export type EncodedSignature = EncodedVerificationKey;
/**
 * Checks that a string (or other input) is a valid CORD DID uri with or without a URI fragment.
 * Throws otherwise.
 *
 * @param input Arbitrary input.
 * @param expectType `ResourceUri` if the URI is expected to have a fragment (following '#'), `Did` if it is expected not to have one. Default allows both.
 */
export declare function validateUri(input: unknown, expectType?: 'Did' | 'ResourceUri'): void;
/**
 * Internal: derive the address part of the DID when it is created from authentication key.
 *
 * @param input The authentication key.
 * @param input.publicKey The public key.
 * @param input.type The type of the key.
 * @returns The expected address of the DID.
 */
export declare function getAddressByKey({ publicKey, type, }: Pick<DidVerificationKey, 'publicKey' | 'type'>): CordAddress;
/**
 * Builds the URI an accountswill have after it’s stored on the blockchain.
 *
 * @param didOrAddress The URI of the account. Internally it’s used with the DID "address" as well.
 * @param version The version of the DID URI to use.
 * @returns The expected DID URI.
 */
export declare function getDidUri(didOrAddress: DidUri | CordAddress): DidUri;
/**
 * Builds the URI of a DID if it is created with the authentication key provided.
 *
 * @param key The key that will be used as DID authentication key.
 * @returns The expected DID URI.
 */
export declare function getDidUriFromKey(key: Pick<DidVerificationKey, 'publicKey' | 'type'>): DidUri;
export {};
