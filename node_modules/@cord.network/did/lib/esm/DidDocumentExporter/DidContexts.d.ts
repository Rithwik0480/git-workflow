/**
 * URL identifying a JSON-LD context file describing terms used in DID documents of the CORD method that are not defined in the W3C DID core context.
 * Should be the second entry in the ordered set of contexts after [[W3C_DID_CONTEXT_URL]] in the JSON-LD representation of a CORD DID document.
 */
export declare const CORD_DID_CONTEXT_URL = "https://github.com/dhiway/spec/did/v1";
/**
 * URL identifying the JSON-LD context file that is part of the W3C DID core specifications describing the terms defined by the core data model.
 * Must be the first entry in the ordered set of contexts in a JSON-LD representation of a DID document.
 * See https://www.w3.org/TR/did-core/#json-ld.
 */
export declare const W3C_DID_CONTEXT_URL = "https://www.w3.org/ns/did/v1";
/**
 * URL identifying a JSON-LD context file proposed by the W3C Credentials Community Group defining a number of terms which are used in verification methods on DID documents.
 * See https://w3c-ccg.github.io/security-vocab/.
 * This document is extended by the context file available under the [[CORD_DID_CONTEXT_URL]].
 */
export declare const W3C_SECURITY_CONTEXT_URL = "https://w3id.org/security/v2";
/**
 * An object containing static copies of JSON-LD context files relevant to DID documents, of the form <context URL> -> context.
 * These context definitions are not supposed to change; therefore, a cached version can (and should) be used to avoid unexpected changes in definitions.
 */
export declare const DID_CONTEXTS: {
    "https://github.com/dhiway/spec/did/v1": {
        '@context': (string | {
            '@protected': boolean;
            Sr25519VerificationKey2020: string;
        })[];
    };
    "https://www.w3.org/ns/did/v1": {
        '@context': {
            '@protected': boolean;
            id: string;
            type: string;
            alsoKnownAs: {
                '@id': string;
                '@type': string;
            };
            assertionMethod: {
                '@id': string;
                '@type': string;
                '@container': string;
            };
            authentication: {
                '@id': string;
                '@type': string;
                '@container': string;
            };
            capabilityDelegation: {
                '@id': string;
                '@type': string;
                '@container': string;
            };
            capabilityInvocation: {
                '@id': string;
                '@type': string;
                '@container': string;
            };
            controller: {
                '@id': string;
                '@type': string;
            };
            keyAgreement: {
                '@id': string;
                '@type': string;
                '@container': string;
            };
            service: {
                '@id': string;
                '@type': string;
                '@context': {
                    '@protected': boolean;
                    id: string;
                    type: string;
                    serviceEndpoint: {
                        '@id': string;
                        '@type': string;
                    };
                };
            };
            verificationMethod: {
                '@id': string;
                '@type': string;
            };
        };
    };
    "https://w3id.org/security/v2": {
        '@context': (string | {
            '@version': number;
            AesKeyWrappingKey2019?: undefined;
            DeleteKeyOperation?: undefined;
            DeriveSecretOperation?: undefined;
            EcdsaSecp256k1Signature2019?: undefined;
            EcdsaSecp256r1Signature2019?: undefined;
            EcdsaSecp256k1VerificationKey2019?: undefined;
            EcdsaSecp256r1VerificationKey2019?: undefined;
            Ed25519Signature2018?: undefined;
            Ed25519VerificationKey2018?: undefined;
            EquihashProof2018?: undefined;
            ExportKeyOperation?: undefined;
            GenerateKeyOperation?: undefined;
            KmsOperation?: undefined;
            RevokeKeyOperation?: undefined;
            RsaSignature2018?: undefined;
            RsaVerificationKey2018?: undefined;
            Sha256HmacKey2019?: undefined;
            SignOperation?: undefined;
            UnwrapKeyOperation?: undefined;
            VerifyOperation?: undefined;
            WrapKeyOperation?: undefined;
            X25519KeyAgreementKey2019?: undefined;
            allowedAction?: undefined;
            assertionMethod?: undefined;
            authentication?: undefined;
            capability?: undefined;
            capabilityAction?: undefined;
            capabilityChain?: undefined;
            capabilityDelegation?: undefined;
            capabilityInvocation?: undefined;
            caveat?: undefined;
            challenge?: undefined;
            ciphertext?: undefined;
            controller?: undefined;
            delegator?: undefined;
            equihashParameterK?: undefined;
            equihashParameterN?: undefined;
            invocationTarget?: undefined;
            invoker?: undefined;
            jws?: undefined;
            keyAgreement?: undefined;
            kmsModule?: undefined;
            parentCapability?: undefined;
            plaintext?: undefined;
            proof?: undefined;
            proofPurpose?: undefined;
            proofValue?: undefined;
            referenceId?: undefined;
            unwrappedKey?: undefined;
            verificationMethod?: undefined;
            verifyData?: undefined;
            wrappedKey?: undefined;
        } | {
            AesKeyWrappingKey2019: string;
            DeleteKeyOperation: string;
            DeriveSecretOperation: string;
            EcdsaSecp256k1Signature2019: string;
            EcdsaSecp256r1Signature2019: string;
            EcdsaSecp256k1VerificationKey2019: string;
            EcdsaSecp256r1VerificationKey2019: string;
            Ed25519Signature2018: string;
            Ed25519VerificationKey2018: string;
            EquihashProof2018: string;
            ExportKeyOperation: string;
            GenerateKeyOperation: string;
            KmsOperation: string;
            RevokeKeyOperation: string;
            RsaSignature2018: string;
            RsaVerificationKey2018: string;
            Sha256HmacKey2019: string;
            SignOperation: string;
            UnwrapKeyOperation: string;
            VerifyOperation: string;
            WrapKeyOperation: string;
            X25519KeyAgreementKey2019: string;
            allowedAction: string;
            assertionMethod: {
                '@id': string;
                '@type': string;
                '@container': string;
            };
            authentication: {
                '@id': string;
                '@type': string;
                '@container': string;
            };
            capability: {
                '@id': string;
                '@type': string;
            };
            capabilityAction: string;
            capabilityChain: {
                '@id': string;
                '@type': string;
                '@container': string;
            };
            capabilityDelegation: {
                '@id': string;
                '@type': string;
                '@container': string;
            };
            capabilityInvocation: {
                '@id': string;
                '@type': string;
                '@container': string;
            };
            caveat: {
                '@id': string;
                '@type': string;
                '@container': string;
            };
            challenge: string;
            ciphertext: string;
            controller: {
                '@id': string;
                '@type': string;
            };
            delegator: {
                '@id': string;
                '@type': string;
            };
            equihashParameterK: {
                '@id': string;
                '@type': string;
            };
            equihashParameterN: {
                '@id': string;
                '@type': string;
            };
            invocationTarget: {
                '@id': string;
                '@type': string;
            };
            invoker: {
                '@id': string;
                '@type': string;
            };
            jws: string;
            keyAgreement: {
                '@id': string;
                '@type': string;
                '@container': string;
            };
            kmsModule: {
                '@id': string;
            };
            parentCapability: {
                '@id': string;
                '@type': string;
            };
            plaintext: string;
            proof: {
                '@id': string;
                '@type': string;
                '@container': string;
            };
            proofPurpose: {
                '@id': string;
                '@type': string;
            };
            proofValue: string;
            referenceId: string;
            unwrappedKey: string;
            verificationMethod: {
                '@id': string;
                '@type': string;
            };
            verifyData: string;
            wrappedKey: string;
            '@version'?: undefined;
        })[];
    };
};
