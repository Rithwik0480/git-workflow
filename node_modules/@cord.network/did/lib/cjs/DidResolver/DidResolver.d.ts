import type { ConformingDidResolutionResult, DidKey, DidResolutionResult, DidResourceUri, DidUri, KeyRelationship, ResolvedDidKey, ResolvedDidServiceEndpoint } from '@cord.network/types';
/**
 * Resolve a DID URI to the DID document and its metadata.
 *
 * The URI can also identify a key or a service, but it will be ignored during resolution.
 *
 * @param did The subject's DID.
 * @returns The details associated with the DID subject.
 */
export declare function resolve(did: DidUri): Promise<DidResolutionResult | null>;
/**
 * Implementation of `resolve` compliant with W3C DID specifications (https://www.w3.org/TR/did-core/#did-resolution).
 * As opposed to `resolve`, which takes a more pragmatic approach, the `didDocument` property contains a fully compliant DID document abstract data model.
 * Additionally, this function returns an id-only DID document in the case where a DID has been deleted or upgraded.
 * If a DID is invalid or has not been registered, this is indicated by the `error` property on the `didResolutionMetadata`.
 *
 * @param did The DID to resolve.
 * @returns An object with the properties `didDocument` (a spec-conforming DID document or `undefined`), `didDocumentMetadata` (equivalent to `metadata` returned by [[resolve]]), as well as `didResolutionMetadata` (indicating an `error` if any).
 */
export declare function resolveCompliant(did: DidUri): Promise<ConformingDidResolutionResult>;
/**
 * Converts the DID key in the format returned by `resolveKey()`, useful for own implementations of `resolveKey`.
 *
 * @param key The DID key in the SDK format.
 * @param did The DID the key belongs to.
 * @returns The key in the resolveKey-format.
 */
export declare function keyToResolvedKey(key: DidKey, did: DidUri): ResolvedDidKey;
/**
 * Converts the DID key returned by the `resolveKey()` into the format used in the SDK.
 *
 * @param key The key in the resolveKey-format.
 * @returns The key in the SDK format.
 */
export declare function resolvedKeyToKey(key: ResolvedDidKey): DidKey;
/**
 * Resolve a DID key URI to the key details.
 *
 * @param keyUri The DID key URI.
 * @param expectedVerificationMethod Optional key relationship the key has to belong to.
 * @returns The details associated with the key.
 */
export declare function resolveKey(keyUri: DidResourceUri, expectedVerificationMethod?: KeyRelationship): Promise<ResolvedDidKey>;
/**
 * Resolve a DID service URI to the service details.
 *
 * @param serviceUri The DID service URI.
 * @returns The details associated with the service endpoint.
 */
export declare function resolveService(serviceUri: DidResourceUri): Promise<ResolvedDidServiceEndpoint>;
